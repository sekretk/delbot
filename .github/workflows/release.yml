name: Release Pipeline

on:
  push:
    tags:
      - '*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      release-date: ${{ steps.version-info.outputs.release-date }}
      backend-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version-info.outputs.version }}
      frontend-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version-info.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Extract version and date
        id: version-info
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          RELEASE_DATE=$(date -u +"%Y-%m-%d")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release-date=$RELEASE_DATE" >> $GITHUB_OUTPUT
          
          echo "📦 Extracted Version: $VERSION"
          echo "📅 Release Date: $RELEASE_DATE"
          
      - name: Update version.ts file
        run: |
          echo "🔄 Updating version.ts with release information..."
          
          cat > frontend/src/version.ts << EOF
          export const VERSION_INFO = {
            version: '${{ steps.version-info.outputs.version }}',
            releaseDate: '${{ steps.version-info.outputs.release-date }}',
            environment: 'production'
          } as const;
          
          export const getVersionString = () => \`v\${VERSION_INFO.version}\`;
          export const getReleaseDate = () => VERSION_INFO.releaseDate;
          export const getEnvironment = () => VERSION_INFO.environment;
          EOF
          
          echo "✅ Updated version.ts:"
          cat frontend/src/version.ts
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push backend Docker image
        run: |
          echo "🐳 Building and pushing backend Docker image..."
          
          # Build backend image with version tag
          docker build -f backend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version-info.outputs.version }} .
          
          # Tag as latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version-info.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          
          # Push both tags
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version-info.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          
          echo "✅ Backend image pushed successfully!"
          
      - name: Build and push frontend Docker image  
        run: |
          echo "🐳 Building and pushing frontend Docker image..."
          
          # Build frontend image with version tag
          docker build -f frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version-info.outputs.version }} .
          
          # Tag as latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version-info.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          
          # Push both tags
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version-info.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          
          echo "✅ Frontend image pushed successfully!"
          
      - name: Create build summary
        run: |
          echo "🎉 **Build & Push Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Built Images" >> $GITHUB_STEP_SUMMARY
          echo "**Backend:**" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version-info.outputs.version }}\`](https://github.com/${{ github.repository }}/pkgs/container/backend)" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest\`](https://github.com/${{ github.repository }}/pkgs/container/backend)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend:**" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version-info.outputs.version }}\`](https://github.com/${{ github.repository }}/pkgs/container/frontend)" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest\`](https://github.com/${{ github.repository }}/pkgs/container/frontend)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Images ready for deployment**" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success() && needs.build-and-push.result == 'success'
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Install kubectl
        run: |
          echo "⚙️ Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo "✅ kubectl installed successfully!"
          kubectl version --client
          
      - name: Install Helm
        run: |
          echo "⚙️ Installing Helm..."
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          echo "✅ Helm installed successfully!"
          helm version
          
      - name: Setup Kubernetes cluster access
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          if [ -n "$KUBE_CONFIG" ]; then
            echo "🔧 Setting up Kubernetes cluster access..."
            mkdir -p ~/.kube
            echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
            chmod 600 ~/.kube/config
            
            # Test cluster connectivity
            if kubectl cluster-info > /dev/null 2>&1; then
              echo "✅ Successfully connected to Kubernetes cluster"
              echo "KUBE_ACCESS=true" >> $GITHUB_ENV
            else
              echo "❌ Failed to connect to Kubernetes cluster"
              echo "KUBE_ACCESS=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ KUBE_CONFIG secret not configured - skipping cluster setup"
            echo "KUBE_ACCESS=false" >> $GITHUB_ENV
          fi
          
      - name: Deploy to Kubernetes with Helm
        if: env.KUBE_ACCESS == 'true'
        run: |
          echo "🚀 Deploying DelBot version ${{ needs.build-and-push.outputs.version }} to Kubernetes..."
          
          # Deploy using Helm with images from build job
          helm upgrade --install delbot ./delbot-chart \
            --set backend.image.tag=${{ needs.build-and-push.outputs.version }} \
            --set frontend.image.tag=${{ needs.build-and-push.outputs.version }} \
            --set commonLabels.version=${{ needs.build-and-push.outputs.version }} \
            --wait --timeout=600s
          
          echo "✅ Deployment completed successfully!"
          
          # Wait for pods to be ready
          echo "⏳ Waiting for all pods to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/delbot-backend -n delbot
          kubectl wait --for=condition=available --timeout=300s deployment/delbot-frontend -n delbot
          
          echo "✅ All pods are ready!"
          
          # Show deployment status
          echo "📊 Deployment Status:"
          kubectl get pods -n delbot
          
          # Show running versions
          echo "🏷️ Deployed Versions:"
          echo "Backend: $(kubectl get deployment delbot-backend -n delbot -o jsonpath='{.spec.template.spec.containers[0].image}')"
          echo "Frontend: $(kubectl get deployment delbot-frontend -n delbot -o jsonpath='{.spec.template.spec.containers[0].image}')"
          
      - name: Create release summary
        run: |
          echo "🎉 **Release ${{ needs.build-and-push.outputs.version }} Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Date:** ${{ needs.build-and-push.outputs.release-date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Extracted version from tag" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Updated version.ts file" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Built and pushed backend Docker image" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Built and pushed frontend Docker image" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Installed kubectl and Helm" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.KUBE_ACCESS }}" == "true" ]; then
            echo "- [x] Deployed to Kubernetes cluster successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- [ ] Kubernetes deployment (cluster access not configured)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ secrets.DELBOT_TOKEN }}" ] && [ -n "${{ secrets.DELBOT_WORKGROUP_CHANNEL }}" ]; then
            echo "- [x] Telegram release notification sent" >> $GITHUB_STEP_SUMMARY
          else
            echo "- [ ] Telegram notification (secrets not configured)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "**Backend:**" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version-info.outputs.version }}\`](https://github.com/${{ github.repository }}/pkgs/container/backend)" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest\`](https://github.com/${{ github.repository }}/pkgs/container/backend)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend:**" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version-info.outputs.version }}\`](https://github.com/${{ github.repository }}/pkgs/container/frontend)" >> $GITHUB_STEP_SUMMARY
          echo "- [\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest\`](https://github.com/${{ github.repository }}/pkgs/container/frontend)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.KUBE_ACCESS }}" == "true" ]; then
            echo "### 🚀 Live Application" >> $GITHUB_STEP_SUMMARY
            echo "**DelBot ${{ steps.version-info.outputs.version }} is now live!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 **Frontend:** [http://delbot.boysthings.top/](http://delbot.boysthings.top/)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 **Backend API:** [http://delbot.boysthings.top/api/health](http://delbot.boysthings.top/api/health)" >> $GITHUB_STEP_SUMMARY
            echo "- ❤️ **Health Check:** [http://delbot.boysthings.top/health](http://delbot.boysthings.top/health)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Kubernetes Status" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Check deployment status" >> $GITHUB_STEP_SUMMARY
            echo "helm status delbot" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# View pods" >> $GITHUB_STEP_SUMMARY
            echo "kubectl get pods -n delbot" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🚀 Manual Deployment" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Deploy manually using Helm" >> $GITHUB_STEP_SUMMARY
            echo "./deploy.sh --version ${{ steps.version-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Or using Docker" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY  
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Send Telegram Release Notification
        env:
          DELBOT_TOKEN: ${{ secrets.DELBOT_TOKEN }}
          DELBOT_WORKGROUP_CHANNEL: ${{ secrets.DELBOT_WORKGROUP_CHANNEL }}
        run: |
          if [ -n "$DELBOT_TOKEN" ] && [ -n "$DELBOT_WORKGROUP_CHANNEL" ]; then
            echo "📱 Sending Telegram release notification..."
            
            # Prepare deployment status message
            if [ "${{ env.KUBE_ACCESS }}" == "true" ]; then
              DEPLOY_STATUS="✅ *Automatically deployed to Kubernetes*"
              APP_LINKS="
              🌐 *Live Application:*
              • [Frontend](http://delbot.boysthings.top/)
              • [Backend API](http://delbot.boysthings.top/api/health)
              • [Health Check](http://delbot.boysthings.top/health)"
            else
              DEPLOY_STATUS="📦 *Docker images published* (manual deployment required)"
              APP_LINKS="
              🚀 *Deploy manually:*
              \`./deploy.sh --version ${{ steps.version-info.outputs.version }}\`"
            fi
            
            # Create release message
            MESSAGE="🤖 *DelBot Release ${{ steps.version-info.outputs.version }}* 🚀
            
            📅 *Date:* ${{ steps.version-info.outputs.release-date }}
            🏷️ *Version:* ${{ steps.version-info.outputs.version }}
            📝 *Commit:* [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            
            ${DEPLOY_STATUS}${APP_LINKS}
            
            🐳 *Docker Images Published:*
            • \`ghcr.io/sekretk/delbot/backend:${{ steps.version-info.outputs.version }}\`
            • \`ghcr.io/sekretk/delbot/frontend:${{ steps.version-info.outputs.version }}\`
            
            📋 *Release Details:*
            [View on GitHub](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
            
            *Release pipeline completed successfully!* ✨"
            
            # Send notification
            curl -s -X POST "https://api.telegram.org/bot${DELBOT_TOKEN}/sendMessage" \
              -d chat_id="${DELBOT_WORKGROUP_CHANNEL}" \
              -d parse_mode="Markdown" \
              -d text="$MESSAGE" \
              -d disable_web_page_preview="true"
            
            if [ $? -eq 0 ]; then
              echo "✅ Telegram notification sent successfully!"
            else
              echo "❌ Failed to send Telegram notification"
            fi
          else
            echo "⚠️ Telegram secrets not configured - skipping notification"
          fi
          
      - name: Display version file
        run: |
          echo "📄 Final version.ts content:"
          echo "================================"
          cat frontend/src/version.ts
          echo "================================"