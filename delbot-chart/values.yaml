# DelBot Helm Chart Values
# This is a YAML-formatted file for DelBot configuration

# Global settings
global:
  namespace: delbot

# Backend service configuration
backend:
  name: delbot-backend
  replicaCount: 2
  
  image:
    repository: ghcr.io/sekretk/delbot/backend
    tag: "0.0.13"  # Default tag, override with --set backend.image.tag=0.0.3
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3000"
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  
  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Frontend service configuration  
frontend:
  name: delbot-frontend
  replicaCount: 2
  
  image:
    repository: ghcr.io/sekretk/delbot/frontend
    tag: "0.0.13"  # Default tag, override with --set frontend.image.tag=0.0.3
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  
  # Volume mounts for nginx cache (required for read-only filesystem)
  volumeMounts:
    - name: nginx-cache
      mountPath: /var/cache/nginx
    - name: nginx-run
      mountPath: /var/run
    - name: tmp
      mountPath: /tmp
  
  volumes:
    - name: nginx-cache
      emptyDir: {}
    - name: nginx-run
      emptyDir: {}
    - name: tmp
      emptyDir: {}
  
  livenessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Ingress configuration
ingress:
  enabled: true
  className: traefik
  annotations:
    # Traefik SSL configuration
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: "letsencrypt-boysthings"
    # Optional: Add rate limiting (if you have middleware configured)
    # traefik.ingress.kubernetes.io/router.middlewares: "default-ratelimit@kubernetescrd"
  
  hosts:
    - host: delbot.boysthings.top
      paths:
        # Frontend - serve React app
        - path: /
          pathType: Prefix
          backend:
            service:
              name: delbot-frontend-service
              port:
                number: 80
        # Backend API - all /api requests go to backend  
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: delbot-backend-service
              port:
                number: 3000
        # Backend health check
        - path: /health
          pathType: Prefix
          backend:
            service:
              name: delbot-backend-service
              port:
                number: 3000
  
  # TLS handled automatically by Traefik with letsencrypt-boysthings cert resolver
  # No need to specify tls section - Traefik will auto-generate certificates
  tls: []

# No image pull secrets needed (public repository)
imagePullSecrets: []

# Labels applied to all resources
commonLabels:
  app: delbot
  version: "0.0.2"  # Override with --set commonLabels.version=0.0.3

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Service account (not needed for DelBot)
serviceAccount:
  create: false

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}